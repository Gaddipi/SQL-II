
SQL EXAMPLES: INNER JOIN / IN / NESTED QUERIES / GROUPBY



//INNER JOIN

-- SELECT artist.name, album.title
-- FROM album
-- INNER JOIN artist
-- ON artist.artist_id = album.artist_id
-- ORDER BY name ASC;

-- SELECT customer.state, customer.country, customer.phone, invoice.total
-- FROM customer
-- INNER JOIN invoice
-- ON customer.customer_id = invoice.customer_id;

// IN

-- SELECT column FROM table WHERE something IN (
--   SELECT column FROM table WHERE something )
  
  
  --select the name of the artists who have albums that start with the letter A
--   SELECT name FROM artist WHERE artist_id IN(
--   	SELECT artist_id from album WHERE title ILIKE 'A%'
--     )

//NESTED QUERIES

--get the name of all the artists who have made sons that consist more than a dollor

-- SELECT name FROM artist WHERE artist_id IN( 
--   SELECT artist_id FROM album WHERE album_id IN(
-- 	SELECT album_id FROM track WHERE unit_price > 1.00
-- 	)
-- )


//GROUP BY

-- SELECT unit_price, count(*) FROM track GROUP BY unit_price


AFTERNOON PROJECT SQL INTER

1.

-- SELECT * FROM invoice 
-- I JOIN invoice_line il ON il.invoice_id = i.invoice_id
-- WHERE il.unit_price > 0.99;

2.

SELECT invoice.invoice_date, customer.first_name, customer.last_name, invoice.total FROM invoice
INNER JOIN customer
ON customer.customer_id = invoice.customer_id; 

3.

SELECT customer.first_name, customer.last_name, employee.first_name, employee.last_name FROM customer
INNER JOIN employee
ON customer.support_rep_id = employee.employee_id

4.

SELECT album.title, artist.name FROM album
INNER JOIN artist 
ON album.artist_id = artist.artist_id

5.
SELECT playlist.track_id
FROM playlist_track 
JOIN playlist ON playlist.playlist_id = playlist_track.playlist_id



6.
SELECT t.name
FROM track t
JOIN playlist_track pt ON pt.track_id = t.track_id
WHERE pt.playlist_id = 5;

7.

SELECT track.name, playlist.name 
FROM track
JOIN playlist_track ON track.track_id = playlist_track.track_id
JOIN playlist ON playlist_track.playlist_id = playlist.playlist_id

8.

SELECT track.name,  album.title
FROM track 
JOIN album ON track.album_id = album.album_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name = 'Alternative & Punk';


Practice nested queries
1.
SELECT *
FROM invoice
WHERE invoice_id IN ( SELECT invoice_id FROM invoice_line WHERE unit_price > 0.99 );

2.
SELECT *
FROM playlist_track
WHERE playlist_id IN ( SELECT playlist_id FROM playlist WHERE name = 'Music' );

3.
SELECT name
FROM track
WHERE track_id IN ( SELECT track_id FROM playlist_track WHERE playlist_id = 5 );

4.
SELECT *
FROM track
WHERE genre_id IN ( SELECT genre_id FROM genre WHERE name = 'Comedy' );

5.
SELECT *
FROM track
WHERE album_id IN ( SELECT album_id FROM album WHERE title = 'Fireball' );

6.
SELECT *
FROM track
WHERE album_id IN ( 
  SELECT album_id FROM album WHERE artist_id IN ( 
    SELECT artist_id FROM artist WHERE name = 'Queen'
  )
);

Pratice updating Rows
1.
UPDATE customer
SET fax = null
WHERE fax IS NOT null;

2.
UPDATE customer
SET company = 'Self'
WHERE company IS null;

3.
UPDATE customer 
SET last_name = 'Thompson' 
WHERE first_name = 'Julia' AND last_name = 'Barnett';

4.
UPDATE customer
SET support_rep_id = 4
WHERE email = 'luisrojas@yahoo.cl';

5.

UPDATE track
SET composer = 'The darkness around us'
WHERE genre_id = ( SELECT genre_id FROM genre WHERE name = 'Metal' )
AND composer IS null;

Group by:

1.
SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON t.genre_id = g.genre_id
GROUP BY g.name;

2.
SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Pop' OR g.name = 'Rock'
GROUP BY g.name;

3.
SELECT ar.name, COUNT(*)
FROM album al
JOIN artist ar ON ar.artist_id = al.artist_id
GROUP BY ar.name;

Use Distinct

1.
SELECT DISTINCT composer
FROM track;

2.
SELECT DISTINCT billing_postal_code
FROM invoice;

3.
SELECT DISTINCT company
FROM customer;


Deleted ROWS
1.
DELETE 
FROM practice_delete 
WHERE type = 'bronze';

2.
DELETE 
FROM practice_delete 
WHERE type = 'silver';

3.
DELETE 
FROM practice_delete 
WHERE value = 150;


eCommerce SIM

CREATE TABLE 

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name TEXT,
    email TEXT
);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name TEXT,
    price INTEGER
);

CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(product_id),
    qty INTEGER
);

INSERT INTO users(name, email)
VALUES 
('Kanye West', 'kanyewest@gmail.com'),
('virgil Abloh', 'Virgilabloh@gmail.com'),
('Post Malone','Postmalone@gmail.com'); 

INSERT INTO product (name, price)
VALUES 
('Off-White', 1000 ),
('BMW M4', 90000 ),
('AP', 300000git  ); 

INSERT INTO orders (product_id)
VALUES 
(1),
(2),
(3); 


SELECT * FROM product AS p
JOIN orders AS o
ON p.id = o.product_id 
WHERE o.id = 1;
  
  

SELECT * FROM product AS p
JOIN orders AS o
ON p.id = o.product_id 
  

SELECT sum(p.price) FROM orders AS o 
JOIN product AS p 
ON o.product_id = p.id;


ALTER TABLE orders
ADD column user_id INT 
REFERENCES users(id)


UPDATE orders 
SET user_id = 1
WHERE orders.id = 1

UPDATE orders 
SET user_id = 2
WHERE orders.id = 2

UPDATE orders 
SET user_id = 3
WHERE orders.id = 3

SELECT * FROM users AS u
JOIN orders AS o
ON u.id = o.user_id 

SELECT u.name, COUNT(o.id)
FROM orders as o 
JOIN users as u
ON u.id = o.user_id 
GROUP BY u.name




